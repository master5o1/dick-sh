#!/usr/bin/env zsh
typeset -A _dick_features
declare -A _dick_memory
_dick_hand=0

_longdick_allowed_variable_names="johnson dick cock schlong penis dong"

## helper function to parse `8====D` number literals
## also extracts variable values from memory.
_dick_value() {
    local value=0
    if [[ "$1" =~ ^8=*D$ ]]; then
        value=$(($(echo "$1" | grep -o "=" | wc -l)))
        echo $value
        return
    fi
    echo $_dick_memory["$1"]
}

## helper function to parse extract HEREDOC and
## de-indent to ensure an inner `EOF` does not
## have preceeding spaces. 
_parse_heredoc_block() {
    local raw=$(cat)
    local ident=`echo $raw | head -n 1 | sed -n 's/^\([[:space:]]*\).*/\1/p'`
    echo $raw | sed "s/^$ident//"
}

DICK() {
    local value=$(_dick_value $2)
    _dick_memory["$1"]=$value
}

GRIP() {
    local prompt="$1"
    local input=""
    printf "$prompt ðŸ«³ "
    read input
    while [[ ! "$input" =~ ^8=*D$ ]]; do
        printf "ðŸ˜¡ $prompt ðŸ«³ "
        read input
    done
    _dick_hand=$(_dick_value $input)
}

GRAB() {
    _dick_hand=$(_dick_value $1)
}

RELEASE() {
    _dick_memory["$1"]=$_dick_hand
}

LONGDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand + $operand))
}

SMALLDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand - $operand))
}

HUGEDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand * $operand))
}

TINYDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand / $operand))
}
DRIBBLEDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand % $operand))
}

_line_ending() {
    if [[ $1 == "LINE" ]]; then
        printf "\r\n"
    fi
}

PEE() {
    local lineending=""
    if [[ $1 == "LINE" ]]; then
        lineending="\r\n"
    fi
    printf "${_dick_hand}${lineending}"
}

WEE() {
    local lineending=""
    if [[ $1 == "LINE" ]]; then
        lineending="\r\n"
    fi
    printf "\x$(printf %x "$_dick_hand")${lineending}"
}

STROKE() {
    local block=$(_parse_heredoc_block)
    while [[ $_dick_hand -ge 0 ]]; do
        eval "$block"
    done
}

EDGING() {
    local block=$(_parse_heredoc_block)
    if [[ "$_dick_hand" -eq 0 ]]; then
        eval "$block"
    fi
}

BAG() {
    local name="$1"
    local block=$(_parse_heredoc_block)

    shift
    for ((i=1; i <= $#; i++)); do
        block="${block//${@[$i]}/\$$i}"
    done

    eval "$name(){;$block;}"
}

__long_dick_conditional() {
    local operand1=$(_dick_value $1)
    local operator=$3
    local operand2=$(_dick_value $5)
    local block=$(_parse_heredoc_block)

    case $operator in
        "BIGGER")
            if [[ $operand1 -gt $operand2 ]]; then
                eval "$block"
            fi
            ;;
        "SMALLER")
            if [[ $operand1 -lt $operand2 ]]; then
                eval "$block"
            fi
            ;;
        "JUST")
            if [[ $operand1 -eq $operand2 ]]; then
                eval "$block"
            fi
            ;;
    esac
}

__long_dick_loop() {
    local operand1=$(_dick_value $1)
    local operand2=$(_dick_value $5)
    local operator=$3
    local block=$(_parse_heredoc_block)

    case $operator in
        "BIGGER")
            while [[ $operand1 -gt $operand2 ]]; do
                eval "$block"
                operand1=$(_dick_value $1)
                operand2=$(_dick_value $5)
            done
            ;;
        "SMALLER")
            while [[ $operand1 -lt $operand2 ]]; do
                eval "$block"
                operand1=$(_dick_value $1)
                operand2=$(_dick_value $5)
            done
            ;;
        "JUST")
            while [[ $operand1 -eq $operand2 ]]; do
                eval "$block"
                operand1=$(_dick_value $1)
                operand2=$(_dick_value $5)
            done
            ;;
    esac
}


__prepocess_long_dick() {
    cat $1 \
      | sed -E 's/LOOK\! (.+)\!/__long_dick_conditional \1 <<CUM/g' \
      | sed 's/DICK JOKES ARE IMMATURE, SERIOUSLY/CUM/g' \
      | sed -E 's/COCK GO FAST IF (.+)\!/__long_dick_loop \1 <<CUM/g' \
      | sed 's/ALRIGHT, STOP COCKING AROUND/CUM/g'
}

__print_error() {
    echo -e "\033[31m$1\033[0m" >&2
}

__longdick_validate_variable_names() {
    if [[ "$_dick_features[strict-mode]" != "true" ]]; then
        return 0
    fi

    local _CLR_RED="\033[31m"
    local _CLR_RST="\033[0m"
    local file_name="$1"
    local exit_code=0
    local line_no=0
    local last_line=""
    local last_location=""
    while IFS= read -r line; do
        ((++line_no))
        if [[ "$line" =~ ^(DICK|RELEASE)\ ([^ ]+)(\ +.+)?$ ]]; then
            local opcode="${match[1]}"
            local name="${match[2]}"
            local spaces="${opcode//?/ } "
            local hint="${name//?/^} "
            local col_no=$(($(echo "$spaces" | grep -o " " | wc -l) + 1))
            local location="$(printf %02d:%02d "$line_no" "$col_no")"
            if [[ ! "$_longdick_allowed_variable_names" =~ "$name" ]]; then
                echo -e "${_CLR_RED}[ERROR] Invalid variable name '$name' at $file_name:$location${_CLR_RST}" >&2
                echo "${_CLR_RED}    ...${_CLR_RST} $last_line" >&2
                echo "${_CLR_RED}    ...${_CLR_RST} $line" >&2
                echo "        $spaces${_CLR_RED}$hint${_CLR_RST}" >&2
                echo "        variable '$name' is not one of '$_longdick_allowed_variable_names'" >&2
                echo >&2
                exit_code=1
            fi
        fi
        last_line="$line"
        last_location="$location"
    done < "$file_name"

    [[ $exit_code -ne 0 ]] && exit $exit_code
}

typeset -A _dick_default_features=(
  shebang-args      true
  strict-mode       false
)
typeset -A _dick_default_features_desc=(
  shebang-args      "reading arguments from shebang"
  strict-mode       "strict mode; limit variable names to those permitted in LongDick."
)
typeset -A _dick_default_features_alias=(
  -s                    strict-mode
  --strict              strict-mode
  --strict-mode         strict-mode
)

_dick_features=("${(@kv)_dick_default_features}")

_dick_source_filename=""
_dick_show_help=false

__dick_parse_args() {
    while [[ "$#" -gt 0 ]]; do
        arg="$1"
        case $arg in
        -s|--strict|--strict-mode) _dick_features[strict-mode]=true; shift;;
        --use-*) _dick_features[${1/--use-/}]=true; shift;;
        --no-*) _dick_features[${1/--no-/}]=false; shift;;
        -h|--help) _dick_show_help=true; shift ;;
        *)
            if [[ -f "$1" ]]; then
                _dick_source_filename="$1"
            fi
            shift
            ;;
        esac
    done
}

__dick_parse_args $@

if [[ "$_dick_show_help" != "true" ]] && [[ -f $_dick_source_filename ]]; then
    if [[ "$_dick_features[shebang-args]" == "true" ]]; then
        __dick_parse_args $(head -n 1 "$_dick_source_filename")
    fi
    __longdick_validate_variable_names "$_dick_source_filename"
    source <(__prepocess_long_dick "$_dick_source_filename")
else
    echo "Usage: dick [options] program.dick"
    echo
    echo "Options:"
    echo
    for key in "${(@k)_dick_default_features_desc}"; do
        local is_default=""
        local desc="${_dick_default_features_desc[$key]}"
        if [[ "${_dick_default_features[$key]}" == "true" ]]; then
            printf "  --no-%-31s %s\n" "$key" "disable $desc"
        else
            printf "  --use-%-30s %s\n" "$key" "enable $desc"
            for flag_alias in "${(@k)_dick_default_features_alias}"; do
                if [[ "${_dick_default_features_alias[$flag_alias]}" == "$key" ]]; then
                    printf "      %3s\n" "${flag_alias}"
                fi
            done
            echo
        fi
    done

    printf "  %-36s %s\n" "-h, --help" "show this help"
fi