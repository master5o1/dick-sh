#!/bin/sh
_dick_hand=0

_longdick_allowed_variable_names="johnson dick cock schlong penis dong"

## helper function to parse `8====D` number literals
## also extracts variable values from memory.
_dick_value() {
    local value=0

    if expr "$1" : '^8=*D$' > /dev/null; then
        value=$(($(echo "$1" | grep -o "=" | wc -l)))
        echo $value
        return
    fi
    eval "echo \$_dick_memory_${1}"
}

## helper function to parse extract HEREDOC and
## de-indent to ensure an inner `EOF` does not
## have preceeding spaces. 
_parse_heredoc_block() {
    local raw=$(cat)
    local ident=$(printf '%s\n' "$raw" | head -n 1 | sed -n 's/^\([[:space:]]*\).*/\1/p')
    printf '%s\n' "$raw" | sed "s/^$ident//"
}

# DICK <name> <value>
# 
# Assign a <value> to a <name> in memory.
# @param $1 {string} name of variable.
# @param $2 {string | numeric} value to assign. May be a variable name or Dick numeric literal.
DICK() {
    local value=$(_dick_value $2)
    eval "_dick_memory_${1}=\"${value}\""
}

# RELEASE <name> <value>
# 
# Assign a value of Hand to a <name> in memory.
# @param $1 {string} name of variable.
RELEASE() {
    eval "_dick_memory_${1}=\"${_dick_hand}\""
}

# GRIP <prompt>
# 
# Prompts user to enter a Dick numeric literal.
# Value is assigned to the Hand.
# @param $1 {string} text to display to the user.
GRIP() {
    local prompt="$1"
    local input=""
    printf "$prompt ðŸ«³ "
    read input
    while ! expr "$input" : '^8=*D$' > /dev/null; do
        printf "ðŸ˜¡ $prompt ðŸ«³ "
        read input
    done
    _dick_hand=$(_dick_value $input)
}

# GRAB <value>
# 
# Assigns <value> to the Hand.
# @param $1 {string | numeric} value to assign. May be a variable name or Dick numeric literal.
GRAB() {
    _dick_hand=$(_dick_value $1)
}

# LONDICK <value>
# 
# Add <value> to value of the Hand.
# @param $1 {string | numeric} value to add. May be a variable name or Dick numeric literal.
LONGDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand + $operand))
}

# SMALLDICK <value>
# 
# Subtract <value> from value of the Hand.
# @param $1 {string | numeric} value to subtract. May be a variable name or Dick numeric literal.
SMALLDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand - $operand))
}

# HUGEDICK <value>
# 
# Multiply value of the Hand by <value>.
# @param $1 {string | numeric} value to multiply. May be a variable name or Dick numeric literal.
HUGEDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand * $operand))
}

# TINYDICK <value>
# 
# Divide value of the Hand by <value>.
# @param $1 {string | numeric} value to divide. May be a variable name or Dick numeric literal.
TINYDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand / $operand))
}

# DRIBBLEDICK <value>
# 
# Modulo value of the Hand by <value>.
# @param $1 {string | numeric} value to modulo. May be a variable name or Dick numeric literal.
DRIBBLEDICK() {
    local operand=$(_dick_value $1)
    _dick_hand=$((_dick_hand % $operand))
}

# PEE [LINE]
# 
# Output numeric value of Hand to STDIN.
# @param $1 {"LINE"} (optional) Append "\r\n" to print a new line.
PEE() {
    lineending=""
    [ "$1" = "LINE" ] && lineending="\r\n"
    printf "${_dick_hand}${lineending}"
}

# WEE [LINE]
# 
# Output ASCII character value of Hand to STDIN.
# @param $1 {"LINE"} (optional) Append "\r\n" to print a new line.
WEE() {
    lineending=""
    [ "$1" = "LINE" ] && lineending="\r\n"
    printf "\\$(printf '%03o' "$_dick_hand")${lineending}"
}


# STROKE <<HEREDOC
# 
# A while loop that evaluates the `<<HEREDOC` string on each iteration of the loop.
# Loop condition is while value of Hand is greater than or equal to zero.
# 
# @example print numbers from 5 to 0.
# GRAB 8=====D
# STROKE <<CUM
#   PEE LINE
#   SMALLDICK 8=D
# CUM
STROKE() {
    local block=$(_parse_heredoc_block)
    while [ $_dick_hand -ge 0 ]; do
        eval "$block"
    done
}

# EDGING <<HEREDOC
# 
# Evaluates the `<<HEREDOC` string IF value of Hand is equal to zero.
# 
# @example print value if that number is divisible by five.
# GRAB value
# DRIBBLEDICK 8=====D
# EDGING <<CUM
#   GRAB value
#   PEE LINE
# CUM
EDGING() {
    local block=$(_parse_heredoc_block)
    if [ "$_dick_hand" -eq 0 ]; then
        eval "$block"
    fi
}

# BAG <name> [arg1, arg2, ...] <<HEREDOC
# 
# Defines a function or procedure.
# @param $1 {string} name of the function.
# @param $2...$n {string} parameters of the function.
#
# @example
# BAG P_DIV_5 arg <<END
#   RELEASE save_hand
#   GRAB arg
#   DRIBBLEDICK 8=====D
#   EDGING <<CUM
#     GRAB arg
#     PEE LINE
#   CUM
#   GRAB save_hand
# END
#
# P_DIV_5 8=====D
BAG() {
    local name="$1"
    local block=$(_parse_heredoc_block)

    shift
    i=1
    while [ "$i" -le "$#" ]; do
        eval "arg=\${$i}"
        block=$(printf "%s" "$block" | sed "s/${arg}/\$$i/g")
        i=$((i + 1))
    done

    eval "$name(){;$block;}"
}


# LOOK! condition
# 
# A LongDick conditional that evaluates the inner block
# of indented code if the condition resolves true.
#
# @example print value of johnson if it is odd.
# GRAB 8===D
# RELEASE johnson
# DRIBBLEDICK 8==D
# RELEASE dong
# LOOK! dong IS JUST LIKE 8=D!
#     GRAB johnson
#     PEE LINE
# DICK JOKES ARE IMMATURE, SERIOUSLY
LOOK() {
    local operand1=$(_dick_value $1)
    local operator=$3
    local operand2=$(_dick_value $5)
    local block=$(_parse_heredoc_block)

    case $operator in
        "BIGGER")
            if [ $operand1 -gt $operand2 ]; then
                eval "$block"
            fi
            ;;
        "SMALLER")
            if [ $operand1 -lt $operand2 ]; then
                eval "$block"
            fi
            ;;
        "JUST")
            if [ $operand1 -eq $operand2 ]; then
                eval "$block"
            fi
            ;;
    esac
}

# COCK! loop
# 
# A LongDick conditional that evaluates the inner block
# of indented code if the condition resolves true.
#
# @example print numbers ascending from 1 to 5.
# DICK johnson 8D
# DICK schlong 8=====D
# COCK GO FAST IF johnson IS SMALLER THAN schlong!
#   GRAB johnson
#   LONGDICK 8=D
#   PEE LINE
# ALRIGHT, STOP COCKING AROUND
COCK() {
    local operand1=$(_dick_value $1)
    local operand2=$(_dick_value $5)
    local operator=$3
    local block=$(_parse_heredoc_block)

    case $operator in
        "BIGGER")
            while [ $operand1 -gt $operand2 ]; do
                eval "$block"
                operand1=$(_dick_value $1)
                operand2=$(_dick_value $5)
            done
            ;;
        "SMALLER")
            while [ $operand1 -lt $operand2 ]; do
                eval "$block"
                operand1=$(_dick_value $1)
                operand2=$(_dick_value $5)
            done
            ;;
        "JUST")
            while [ $operand1 -eq $operand2 ]; do
                eval "$block"
                operand1=$(_dick_value $1)
                operand2=$(_dick_value $5)
            done
            ;;
    esac
}


# preprocessor to rewrite LongDick conditional and loops
# to a shell-compatible version function call.
# eg,
# LOOK! dong IS JUST LIKE 8=D!
#   GRAB johnson
#   PEE LINE
# DICK JOKES ARE IMMATURE, SERIOUSLY
#
# becomes
#
# __long_dick_conditional dong IS JUST LIKE 8=D <<CUM
#   GRAB johnson
#   PEE LINE
# CUM
__prepocess_long_dick() {
    cat $1 \
      | sed -E 's/LOOK\! (.+)\!/LOOK \1 <<CUM/g' \
      | sed 's/DICK JOKES ARE IMMATURE, SERIOUSLY/CUM/g' \
      | sed -E 's/COCK GO FAST IF (.+)\!/COCK \1 <<CUM/g' \
      | sed 's/ALRIGHT, STOP COCKING AROUND/CUM/g'
    echo
}

__longdick_validate_variable_names() {
    if [ $(_use_feature "strict-mode") -eq 0 ]; then
        return 0
    fi

    local _CLR_RED="$(printf '\033[31m')"
    local _CLR_RST="$(printf '\033[0m')"
    local file_name="$1"
    local exit_code=0
    local line_no=0
    local last_line=""
    local last_location=""
    while IFS= read -r line; do
        line_no=$((line_no + 1))
        local indent=`echo "$line" | sed -n 's/^\([[:space:]]*\).*/\1/p'`
        set -- `echo $line | sed "s/^$ident//"`
        local opcode="$1"
        local name="$2"
        local value="$3"
        local spaces="${indent}$(printf '%*s' "${#opcode}" "") "

        local col_no=$(($(echo "$spaces" | grep -o " " | wc -l) + 1))
        local location="$(printf %02d:%02d "$line_no" "$col_no")"

        if [ "$line" = "${indent}DICK JOKES ARE IMMATURE, SERIOUSLY" ]; then
            :
        elif [ "$opcode" != "DICK" ] && [ "$opcode" != "RELEASE" ]; then
            :
        else
            case "$_longdick_allowed_variable_names" in
                *"$name"*) ;;
                *)
                    local hint="$(printf '%s\n' "$name" | sed 's/./^/g') "
                    echo "${_CLR_RED}[ERROR] Invalid variable name '$name' at $file_name:$location${_CLR_RST}" >&2
                    echo "${_CLR_RED}    ...${_CLR_RST} $last_line" >&2
                    echo "${_CLR_RED}    ...${_CLR_RST} $line" >&2
                    echo "        $spaces${_CLR_RED}$hint${_CLR_RST}" >&2
                    echo "        variable '$name' is not one of '$_longdick_allowed_variable_names'" >&2
                    echo >&2
                    exit_code=1
                ;;
            esac
        fi

        last_line="$line"
        last_location="$location"
    done < "$file_name"

    [ $exit_code -ne 0 ] && exit $exit_code
}

_dick_features_available="strict-mode shebang-args exec help"
_dick_features_default_enabled="shebang-args exec"
_dick_features_enabled="$_dick_features_default_enabled"


_dick_help_text_shebang_args="reading arguments from shebang"
_dick_help_text_exec="execute after pre-processing."

_dick_help_text_strict_mode="strict mode; limit to permitted variable names in LongDick."
_dick_args_alias_strict_mode="--strict --strict-mode -s "

_dick_help_text_help="show this help"
_dick_args_alias_help="--help -h "
_dick_alias_only_help=true

_dick_source_filename=""
_dick_show_help=false

_has_feature() {
    case "$_dick_features_available" in
        *"$1"*) echo 1;;
        *) echo 0;;
    esac
}

_use_feature() {
    if [ $(_has_feature "$1") -eq 0 ]; then
        echo 0
        return
    fi
    case " $_dick_features_enabled " in
        *"$1"*) echo 1;;
        *) echo 0;;
    esac
}

_is_default_feature() {
    if [ $(_has_feature "$1") -eq 0 ]; then
        echo 0
        return
    fi
    case " $_dick_features_default_enabled " in
        *"$1"*) echo 1;;
        *) echo 0;;
    esac
}

_enable_feature() {
    if [ $(_has_feature "$1") -eq 0 ]; then return; fi;
    if [ $(_use_feature "$1") -eq 1 ]; then return; fi;
    _dick_features_enabled="${_dick_features_enabled} ${1}"
}

_disable_feature() {
    if [ $(_has_feature "$1") -eq 0 ]; then return; fi;
    if [ $(_use_feature "$1") -eq 0 ]; then return; fi;
    _dick_features_enabled=$(echo " $_dick_features_enabled" | sed "s/ $1//" | sed "s/^ //")
}

__dick_parse_args() {
    while [ "$#" -gt 0 ]; do
        arg="$1"
        feature=$(echo "$arg" | sed 's/--use-//g' | sed 's/--no-//g')
        feature_var_suffix=$(printf '%s\n' "$key" | sed 's/-/_/g')
        case $arg in
        --use-*) _enable_feature "$feature"; shift;;
        --no-*) _disable_feature "$feature"; shift;;
        -h|--help) _enable_feature help; shift;;
        -s|--strict|--strict-mode) _enable_feature strict-mode; shift;;
        -*)
            if [ ! -z "$(eval "echo \$_dick_args_alias_$feature_var_suffix")" ]; then
                 _enable_feature "$(eval "echo \$_dick_args_alias_$feature_var_suffix")"
            fi
            shift
            ;;
        *)
            if [ -f "$arg" ]; then
                _dick_source_filename="$arg"
            fi
            shift
            ;;
        esac
    done
}

__dick_parse_args $@

if [ $(_use_feature "help") -eq 0 ] && [ -f $_dick_source_filename ]; then
    if [ $(_use_feature "shebang-args") -eq 1 ]; then
        __dick_parse_args $(head -n 1 "$_dick_source_filename")
    fi
    __longdick_validate_variable_names "$_dick_source_filename"

    if [ $(_use_feature "exec") -eq 1 ]; then
        # source <(__prepocess_long_dick "$_dick_source_filename")
        eval "$(__prepocess_long_dick "$_dick_source_filename")"
    else
        __prepocess_long_dick "$_dick_source_filename"
    fi
else
    echo "Usage: dick [options] program.dick"
    echo
    echo "Options:"
    for key in $_dick_features_available; do
        key_var_suffix=$(printf '%s\n' "$key" | sed 's/-/_/g')
        is_default=""
        line_desc=""
        
        desc="$(eval "echo \$_dick_help_text_$key_var_suffix")"
        
        indent=""
        if [ $(_is_default_feature $key) -eq 1 ]; then
            printf "  --no-%-21s %s\n" "$key" "disable $desc"
            indent="  "
        else
            if [ "$(eval "echo \$_dick_alias_only_$key_var_suffix")" != "true" ]; then
                printf "  --use-%-20s %s\n" "$key" "enable $desc"
                desc=""
                indent="  "
            fi
            flag_aliases="$(eval "echo \$_dick_args_alias_$key_var_suffix")"
            for flag_alias in $flag_aliases; do
                if [ ! -z $indent ]; then
                    printf "%s  %3s%-21s %s\n" "$indent" "${flag_alias}" "" "$desc"
                else
                    printf "  %-26s %s\n" "${flag_alias}" "$desc"
                    indent="  "
                fi
                desc=""
            done
        fi
        echo
    done
fi